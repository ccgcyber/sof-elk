# SOF-ELKÂ® Configuration File
# (C)2016 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for milter-greylist messages
# Note that this file is UNSUPPORTED.  By default, it is not enabled in SOF-ELK.

filter {
    if [type] == "syslog" {
        if [syslog_program] == "milter-greylist" {
            grok {
                # t2ALS3rj016380: skipping greylist because address 1.2.3.4 is whitelisted, (from=<user1@host.tld>, rcpt=<user2@host.tld>, addr=remote.hostname.tld[1.2.3.4]) ACL 180
                # t2ALZsnw019147: skipping greylist because sender is SPF-compliant, (from=<user1@host.tld>, rcpt=<user2@host.tld>, addr=remote.hostname.tld[1.2.3.4]) ACL 192
                # t2ALnwej024858: skipping greylist because sender <user1@host.tld> is whitelisted, (from=<user1@host.tld>, rcpt=<user2@host.tld>, addr=remote.hostname.tld[1.2.3.4]) ACL 175
                # t2ALicGZ021704: skipping greylist because recipient <user2@host.tld> is whitelisted, (from=<user@host.tld>, rcpt=<user2@host.tld>, addr=remote.hostname.tld[1.2.3.4]) ACL 177
                patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
                match => [ "message", "^%{WORD:smtp_qid}: skipping greylist because %{GREEDYDATA:skip_reason}, \(%{GREEDYDATA:message_remainder}\) ACL %{INT:acl}" ]

                add_tag => [ "parse_done", "got_greylist_wl" ]
                tag_on_failure => [ "gpfail_gl1" ]
            }

            if !("parse_done" in [tags]) {
                grok {
                    # t2ALh2Bv021403: addr remote.hostname.tld[1.2.3.4] from <user1@host.tld> to <user2@host.tld> delayed for 00:15:00 (ACL 190)
                    patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
                    match => [ "message", "^%{NOTCOLON:qid}: addr \[?%{IPORHOST:host}\]?\[%{IP:source_ip}\] from <%{EMAILADDRESS:from_address}> to <%{EMAILADDRESS:to_address}> delayed for %{HMS:delay_time} \(ACL %{INT:acl}\)" ]

                    add_tag => [ "parse_done", "got_greylist_delay" ]
                    tag_on_failure => [ "gpfail_gl2" ]
                }
            }

            if !("parse_done" in [tags]) {
                grok {
                    # t2AKFcYV005465: addr 1.2.3.4 from <user1@host.tld> rcpt <user2@host.tld>: autowhitelisted for another 48:00:00
                    patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
                    match => [ "message", "^%{NOTCOLON:qid}: addr %{IP:source_ip} from <%{EMAILADDRESS:from_address}> rcpt <%{EMAILADDRESS:to_address}>: autowhitelisted for another %{HMS:allow_time}" ]

                    add_tag => [ "parse_done", "got_greylist_auto_wl" ]
                    tag_on_failure => [ "gpfail_gl3" ]
                }
            }

            if !("parse_done" in [tags]) {
                grok {
                    # User user2@host.tld authenticated, bypassing greylisting
                    patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
                    match => [ "message", "^User %{EMAILADDRESS:user} authenticated, bypassing greylisting" ]

                    add_tag => [ "parse_done", "got_greylist_auth" ]
                    tag_on_failure => [ "gpfail_gl4" ]
                }
            }

            # remove "gpfail_gl*" tags if "parse_done" tag also present
            if "parse_done" in [tags] {
                mutate {
                    remove_tag => [ "gpfail_gl1", "gpfail_gl2", "gpfail_gl3", "gpfail_gl4" ]
                }
            }

            # parse message_remainder if present
            if [message_remainder] {
                kv {
                    trim => "<>"
                    field_split => ","
                    trimkey => " ()"
                }

                # should only have from, rcpt, addr fields
                if [addr] {
                    grok {
                        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
                        match => [ "message", "%{HOSTNAME:host}\[%{IP:source_ip}\]" ]
                        tag_on_failure => [ "gpfail_gl5" ]
                    }
                    mutate {
                        remove_field => [ "addr" ]
                    }
                }
                mutate {
                    remove_field => [ "message_remainder" ]
                }
            }

            # if the host and source_ip fields are the same, remove host
            if [host] == [source_ip] {
                mutate {
                    remove_field => [ "host" ]
                }
            }
        }
    }
}
