# SOF-ELKÂ® Configuration File
# (C)2018 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for NetFlow records

filter {
  if [type] == "archive-netflow" {
    grok {
      patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
      # nfdump2sof-elk.sh
      match => [ "message", "(?:%{IPORHOST:exporter})?(?:%{SPACE})?%{NONNEGINT:destination_as:int}%{SPACE}%{NONNEGINT:destination_mask:int}%{SPACE}%{NONNEGINT:engine_type:int}/%{NONNEGINT:engine_id:int}%{SPACE}%{TIMESTAMP_NETFLOW:first_switched_raw}%{SPACE}%{NONNEGINT:flow_records}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT:in_bytes}%{SPACE}%{NONNEGINT:in_packets}%{SPACE}%{NONNEGINT:input_snmp:int}%{SPACE}%{IPV4:destination_ip}%{SPACE}%{IPV4:next_hop_ip}%{SPACE}%{IPV4:source_ip}%{SPACE}(%{ICMP_TYPECODE}|%{NONNEGINT:destination_port:int})%{SPACE}%{NONNEGINT:source_port:int}%{SPACE}%{TIMESTAMP_NETFLOW:last_switched_raw}%{SPACE}%{NONNEGINT:output_snmp:int}%{SPACE}%{WORD:protocol}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT:source_as:int}%{SPACE}%{NONNEGINT:source_mask:int}%{SPACE}%{NONNEGINT:source_tos:int}%{SPACE}%{NOTSPACE:tcp_aflags}%{SPACE}%{NONNEGINT:version:int}" ]

      # vpcflow2sof-elk.sh
      match => [ "message", "%{INT:vpcflow_version} %{INT:vpcflow_account_id} %{NOTSPACE:vpcflow_interface_id} %{IPV4:source_ip} %{IPV4:destination_ip} %{INT:source_port} %{INT:destination_port} %{INT:protocol} %{INT:in_packets} %{INT:in_bytes} %{INT:first_switched_raw} %{INT:last_switched_raw} %{WORD:vpcflow_action} %{WORD:vpcflow_logstatus}" ]

      remove_field => [ "message", "MSECOND" ]
    }
    if ![exporter] {
      mutate {
        replace => { "exporter" => "0.0.0.0" }
      }
    }

    # use the flow start timestamp for the event timestamp
    ##  2014-05-11 16:25:11.841 (archived from nfdump)
    date {
      match => [ "first_switched_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "UNIX" ]
    }

    ## unify timestamp formats between live and archive
    date {
      match => [ "first_switched_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "UNIX" ]
      target => "first_switched"
    }
    date {
      match => [ "last_switched_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "UNIX" ]
      target => "last_switched"
    }
    mutate {
      remove_field => [ "first_switched_raw", "last_switched_raw" ]
    }
  }

  if [type] == "netflow" {
    ### rename fields to remove the [nf] superfield, to better allow ES dynamic mappings, and to enforce field naming hygiene
    mutate {
      rename => {
        "[host]" => "exporter"
        "[nf][in_bytes]" => "in_bytes"
        "[nf][in_pkts]" => "in_packets"
        "[nf][flows]" => "flows"
        "[nf][protocol]" => "protocol"
        "[nf][src_tos]" => "source_tos"
        "[nf][tcp_flags]" => "tcp_flags"
        "[nf][l4_src_port]" => "source_port"
        "[nf][ipv4_src_addr]" => "source_ip"
        "[nf][src_mask]" => "source_mask"
        "[nf][input_snmp]" => "input_snmp"
        "[nf][l4_dst_port]" => "destination_port"
        "[nf][ipv4_dst_addr]" => "destination_ip"
        "[nf][dst_mask]" => "destination_mask"
        "[nf][output_snmp]" => "output_snmp"
        "[nf][ipv4_next_hop]" => "next_hop_ip"
        "[nf][src_as]" => "source_as"
        "[nf][dst_as]" => "destination_as"
        "[nf][bgp_ipv4_next_hop]" => "bgp_next_hop_ip"
        "[nf][mul_dst_pkts]" => "mul_destination_packets"
        "[nf][mul_dst_bytes]" => "mul_destination_bytes"
        "[nf][last_switched]" => "last_switched"
        "[nf][first_switched]" => "first_switched"
        "[nf][out_bytes]" => "out_bytes"
        "[nf][out_pkts]" => "out_packets"
        "[nf][min_pkt_length]" => "min_pkt_length"
        "[nf][max_pkt_length]" => "max_pkt_length"
        "[nf][ipv6_src_addr]" => "source_ip"
        "[nf][ipv6_dst_addr]" => "destination_ip"
        "[nf][ipv6_src_mask]" => "source_mask"
        "[nf][ipv6_dst_mask]" => "destination_mask"
        "[nf][ipv6_flow_label]" => "flow_label"
        "[nf][mul_igmp_type]" => "mul_igmp_type"
        "[nf][sampling_interval]" => "sampling_interval"
        "[nf][sampling_algorithm]" => "sampling_algorithm"
        "[nf][flow_active_timeout]" => "flow_active_timeout"
        "[nf][flow_inactive_timeout]" => "flow_inactive_timeout"
        "[nf][engine_type]" => "engine_type"
        "[nf][engine_id]" => "engine_id"
        "[nf][total_bytes_exp]" => "total_bytes_exp"
        "[nf][total_pkts_exp]" => "total_packets_exp"
        "[nf][total_flows_exp]" => "total_flows_exp"
        "[nf][ipv4_src_prefix]" => "source_prefix"
        "[nf][ipv4_dst_prefix]" => "destination_prefix"
        "[nf][mpls_top_label_type]" => "mpls_top_label_type"
        "[nf][mpls_top_label_ip_addr]" => "mpls_top_label_ip"
        "[nf][flow_sampler_id]" => "flow_sampler_id"
        "[nf][flow_sampler_mode]" => "flow_sampler_mode"
        "[nf][flow_sampler_random_interval]" => "flow_sampler_random_interval"
        "[nf][min_ttl]" => "min_ttl"
        "[nf][max_ttl]" => "max_ttl"
        "[nf][ipv4_ident]" => "ident"
        "[nf][dst_tos]" => "destination_tos"
        "[nf][in_src_mac]" => "in_source_mac"
        "[nf][out_dst_mac]" => "out_destination_mac"
        "[nf][src_vlan]" => "source_vlan"
        "[nf][dst_vlan]" => "destination_vlan"
        "[nf][ip_protocol_version]" => "ip_protocol_version"
        "[nf][direction]" => "direction"
        "[nf][ipv6_next_hop]" => "next_hop_ip"
        "[nf][bgp_ipv6_next_hop]" => "bgp_next_hop_ip"
        "[nf][ipv6_option_headers]" => "option_headers"
        "[nf][in_dst_mac]" => "in_destination_mac"
        "[nf][out_src_mac]" => "out_source_mac"
        "[nf][if_name]" => "if_name"
        "[nf][if_desc]" => "if_desc"
        "[nf][sampler_name]" => "sampler_name"
        "[nf][in_permanent_bytes]" => "in_permanent_bytes"
        "[nf][in_permanent_pkts]" => "in_permanent_packets"
        "[nf][forwarding_status]" => "forwarding_status"
        "[nf][flow_end_reason]" => "flow_end_reason"
        "[nf][conn_id]" => "conn_id"
        "[nf][icmp_type]" => "icmp_type"
        "[nf][icmp_code]" => "icmp_code"
        "[nf][icmp_type_ipv6]" => "icmp_type"
        "[nf][icmp_code_ipv6]" => "icmp_code"
        "[nf][xlate_src_addr_ipv6]" => "xlate_source_ip"
        "[nf][xlate_dst_addr_ipv6]" => "xlate_destination_ip"
        "[nf][fw_ext_event]" => "fw_ext_event"
        "[nf][event_time_msec]" => "event_time_msec"
        "[nf][flow_start_msec]" => "flow_start_msec"
        "[nf][fwd_flow_delta_bytes]" => "fwd_flow_delta_bytes"
        "[nf][rev_flow_delta_bytes]" => "rev_flow_delta_bytes"
        "[nf][ingress_acl_id]" => "ingress_acl_id"
        "[nf][gress_acl_id]" => "gress_acl_id"
        "[nf][username]" => "username"
        "[nf][xlate_src_addr_ipv4]" => "xlate_source_ip"
        "[nf][xlate_dst_addr_ipv4]" => "xlate_destination_ip"
        "[nf][xlate_src_port]" => "xlate_source_port"
        "[nf][xlate_dst_port]" => "xlate_destination_port"
        "[nf][fw_event]" => "fw_event"
        "[nf][application_id]" => "application_id"
        "[nf][udp_src_port]" => "source_port"
        "[nf][udp_dst_port]" => "destination_port"
        "[nf][tcp_src_port]" => "source_port"
        "[nf][tcp_dst_port]" => "destination_port"
        "[nf][version]" => "version"
        "[nf][flow_seq_num]" => "flow_seq_num"
        "[nf][flow_records]" => "flow_records"
      }
    }

    # use the flow start timestamp for the event timestamp
    ##  2014-10-14T00:41:56.999Z (live netflow)
    date {
      match => [ "first_switched", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601" ]
    }

    # convert the integer TCP flag value to ascii/hex
    if [tcp_flags] {
      translate {
        dictionary_path => "/usr/local/sof-elk/lib/dictionaries/tcp_flags_int2netflow.yaml"
        field => "tcp_flags"
        destination => "tcp_aflags"
        remove_field => [ "tcp_flags" ]
      }
    }
  }

  if [type] == "netflow" or [type] == "archive-netflow" {
    # strip dots from tcp_aflags
    if [tcp_aflags] {
      mutate {
        gsub => [ "tcp_aflags", "\.", "" ]
      }
    }

    # replace the numerical protocol number with a text equivalent
    translate {
      dictionary_path => "/usr/local/sof-elk/lib/dictionaries/ip_proto_int2netflow.yaml"
      field => "protocol"
      destination => "aprotocol"
    }

    # populate additional fields or modify as needed for other flow sources
    if ![flow_records] {
      mutate {
        add_field => { "flow_records" => "1" }
      }
    }
    if [flow_records] == "0" {
      mutate {
        replace => { "flow_records" => "1" }
      }
    }
    if ![missed_bytes] {
      mutate {
        add_field => { "missed_bytes" => "0" }
      }
    }
    if ![out_bytes] {
      mutate {
        add_field => { "out_bytes" => "0" }
      }
    }
    if ![out_packets] {
      mutate {
        add_field => { "out_packets" => "0" }
      }
    }

    # convert types
    if [in_bytes] {
      mutate {
        convert => { "in_bytes" => "integer" }
      }
    }
    if [out_bytes] {
      mutate {
        convert => { "out_bytes" => "integer" }
      }
    }
    if [flow_records] {
      mutate {
        convert => { "flow_records" => "integer" }
      }
    }
    if [in_packets] {
      mutate {
        convert => { "in_packets" => "integer" }
      }
    }
    if [out_packets] {
      mutate {
        convert => { "out_packets" => "integer" }
      }
    }
    if [missed_bytes] {
      mutate {
        convert => { "missed_bytes" => "integer" }
      }
    }

    mutate {
      add_field => { "path" => "NetFlow from %{exporter}" }

      # geoip needs IPs to be strings, not ip types
      convert => {
        "source_ip" => "string"
        "destination_ip" => "string"
      }
    }
  }

  if [type] == "archive-netflow" {
    if [aprotocol] == "icmp" {
      mutate {
        replace => { "source_port" => "%{icmp_type}" }
      }
      mutate {
        replace => { "destination_port" => "%{icmp_code}" }
      }
      mutate {
        remove_field => [ "icmp_type", "icmp_code" ]
      }
    }
  }
}
